=author CJM


=plugin ArchiveRelease
releaser

This plugin will cause the F<release> command to mark the
tarball read-only and move it to an archive directory.


=plugin FileFinder::ByName
core file-finder

This selects files by matching their pathnames.


=plugin FileFinder::Filter
core file-finder

This takes the results from another FileFinder and filters out
unwanted files by matching their pathnames.


=plugin MakeMaker::Custom
install template

This plugin is for people who need something more complex than the
auto-generated F<Makefile.PL> or F<Build.PL> generated by the
L<MakeMaker|Dist::Zilla::Plugin::MakeMaker> or
L<ModuleBuild|Dist::Zilla::Plugin::ModuleBuild> plugins.

It is a subclass of the MakeMaker plugin, but it does not write a
F<Makefile.PL> for you.  Instead, you write your own F<Makefile.PL>,
which may do anything L<ExtUtils::MakeMaker> is capable of.  This
plugin will process F<Makefile.PL> as a template, which allows you to
add data from Dist::Zilla to the version you distribute (if you want).


=plugin MatchManifest
manifest metadata

This plugin will ensure that the distribution contains a
F<MANIFEST> file and that its contents match the files collected by
Dist::Zilla.  If not, it will display the differences and offer to
update the F<MANIFEST>.


=plugin Metadata
metadata

This plugin allows you to add arbitrary keys to your distribution's
metadata.


=plugin ModuleBuild::Custom
install template

This plugin is for people who need something more complex than the
auto-generated F<Makefile.PL> or F<Build.PL> generated by the
L<MakeMaker|Dist::Zilla::Plugin::MakeMaker> or
L<ModuleBuild|Dist::Zilla::Plugin::ModuleBuild> plugins.

It is a subclass of the ModuleBuild plugin, but it does not write a
F<Build.PL> for you.  Instead, you write your own F<Build.PL>,
which may do anything L<Module::Build> is capable of.  This
plugin will process F<Build.PL> as a template, which allows you to
add data from Dist::Zilla to the version you distribute (if you want).


=plugin RecommendedPrereqs
prereqs

This plugin will look for special comments that specify suggested or
recommended prerequisites.  It's intended as a companion to
L<AutoPrereqs|Dist::Zilla::Plugin::AutoPrereqs>, which can only
determine required prerequisites.


=plugin Test::PrereqsFromMeta
file-gatherer tests

This plugin will inject F<t/00-all_prereqs.t> into your dist.  This
test reads your F<META.json> file and attempts to load all runtime
prerequisites.  It fails if any required runtime prerequisites fail to
load.

In addition, if C<AUTOMATED_TESTING> is set, it dumps out every module
in C<%INC> along with its version.  This can help you determine the
cause of failures reported by CPAN Testers.


=plugin TestRelease
core tests before-release

This plugin extracts the tarball that's about to be released and
ensures that it passes its tests.  If any tests fail it aborts the
release.  B<You should be using this plugin.> (It's included in
L<@Basic|Dist::Zilla::PluginBundle::Basic>.)


=plugin VersionFromModule
version version-provider

This extracts the version number from the main module, just like
L<MakeMaker|ExtUtils::MakeMaker> does with C<VERSION_FROM> or
L<Module::Build> does with C<dist_version_from>.  Useful if you want to
manually manage your distribution's version.


=plugin PodLoom
documentation file-munger

If included, this plugin will process each F<.pm> and F<.pod> file under
F<lib> or in the root directory through Pod::Loom.
