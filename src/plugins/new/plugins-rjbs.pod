=author RJBS


=plugin AutoVersion
core version-provider

This provides a version number derived from the current date.  You
should consider using a newer plugin like
L<Git::NextVersion|Dist::Zilla::Plugin::Git::NextVersion> instead,
because the versions generated by this plugin are hard for people to
read and compare.

=for deprecated =plugin BumpVersion
core


=plugin CheckPrereqsIndexed
before-release prereqs

This plugin will check every required package against the CPAN index
to ensure that they're all real, installable packages.  If any are
unknown, it will prompt the user to continue or abort.  This is
especially useful if you're using
L<AutoPrereqs|Dist::Zilla::Plugin::AutoPrereqs>, as it can be a little
overzealous on occasion.


=plugin CPANFile
core file-gatherer metadata

Creates a L<cpanfile|https://github.com/miyagawa/cpanfile> listing
your distribution's prerequisites.


=plugin ConfirmRelease
core before-release

This plugin displays the name of the distribution tarball about to be
released, and asks you if you really mean to release it.


=plugin DistINI
core minting

This plugin produces a bare-bones F<dist.ini> file in a new dist.
You probably want to use a F<dist.ini> template along with
L<GatherDir::Template|Dist::Zilla::Plugin::GatherDir::Template>
instead of this.


=plugin ExecDir
core scripts install

Use this plugin if your distribution includes scripts that should be
installed along with your modules.


=plugin ExtraTests
core tests tests-extra file-munger

This plugin moves tests from the F<xt/> directory to the F<t/>
directory and rewrites them to skip unless the appropriate environment
variable is set during testing.


=plugin FakeRelease
core releaser

This does nothing but log a message saying the dist was fake released.
It's primarily used for testing Dist::Zilla plugins, but it can also
be used by authors who don't want to use any of the other releasers.

=for internal =plugin FinderCode
core

=comment NEED DESCRIPTION


=plugin GatherDir
core file-gatherer

This gathers up all the files in a directory (unless they match its
skip regex).


=plugin GatherDir::Template
core file-gatherer minting template

This subclass of L<GatherDir|Dist::Zilla::Plugin::GatherDir> feeds the
gathered files through L<Text::Template>.

It is meant to be used when minting dists with C<dzil new>, but could be used
in building existing dists, too.


=plugin GenerateFile
core file-gatherer template

This plugin allows you to create a short file directly from its
config, which may include L<Text::Template> processing.


=plugin InlineFiles
core file-gatherer for-subclassing

This plugin exists only to be a base class for plugins that want to
generate files.


=plugin License
core file-gatherer documentation metadata

This plugin adds a F<LICENSE> file containing the full text of the
distribution's license, as produced by the C<fulltext> method of the
dist's L<Software::License> object.


=plugin MakeMaker
core install tests

This plugin generates a standard F<Makefile.PL> for your distribution.
It also includes L<MakeMaker::Runner|Dist::Zilla::Plugin::MakeMaker::Runner>
to build your distribution and run its tests.


=plugin MakeMaker::Runner
core tests

This is the part of the L<MakeMaker|Dist::Zilla::Plugin::MakeMaker>
plugin that knows how to build your distribution and run its tests
using F<Makefile.PL>.  You wouldn't normally include it directly.


=plugin ManifestSkip
core file-pruner manifest

This plugin prunes files using the rules from a F<MANIFEST.SKIP> file
in the same format that MakeMaker and Module::Build use.

This plugin is for people who like to keep the list of pruned files in
a separate file.  If you prefer to keep that in F<dist.ini>, use
L<PruneFiles|Dist::Zilla::Plugin::PruneFiles>.


=plugin Manifest
core file-gatherer manifest metadata

This plugin creates a F<MANIFEST> file that lists all the files
gathered by Dist::Zilla.


=plugin MetaConfig
core metadata

This plugin adds a top-level C<x_Dist_Zilla> key to your
distribution's metadata that records the Dist::Zilla version used to
build your distribution as well as all the plugins used.


=plugin MetaJSON
core file-gatherer metadata

This plugin creates a F<META.json> file with your distribution's metadata.


=plugin MetaNoIndex
core metadata

This plugin allows you to prevent PAUSE/CPAN from indexing things you don't
want indexed.  This is useful if you build test classes or example classes
that are used for those purposes only, and are not part of the distribution.
It does this by adding a C<no_index> block to your F<META.json> (or
F<META.yml>) file in your distribution.


=plugin MetaResources
core metadata

This plugin allows you to add entries to the C<resources> key of your
distribution's metadata.


=plugin MetaTests
core file-gatherer tests tests-extra

This adds F<xt/release/meta-yaml.t> to your distribution, which is a
standard L<Test::CPAN::Meta> test.


=plugin MetaYAML
core file-gatherer metadata

This plugin creates a F<META.yml> file with your distribution's metadata.


=plugin ModuleBuild
core file-gatherer install tests

This plugin generates a standard F<Build.PL> for your distribution.
It also knows how to build your distribution and run its tests using
F<Build.PL>.


=plugin ModuleShareDirs
core install

This plugin lets you install a directory's contents as module-level
shared data files (to use with C<module_file> from L<File::ShareDir>).


=plugin NextRelease
core file-munger after-release changelog

This plugin automatically inserts the version number and release date
into your F<Changes> when you make a release.


=plugin PkgDist
core file-munger metadata

Insert a C<$DIST> variable with the name of the distribution after
each C<package> statement in the form

    {
      $Your::Package::Submodule::DIST = 'Your-Package';
    }

The C<$DIST> variable is not an official standard, and is not
currently used by the module toolchain.


=plugin PkgVersion
core file-munger version version-insert

Insert a version number after each C<package> statement in the form

    {
      $Your::Package::VERSION = '1.234';
    }


=plugin PodCoverageTests
core file-gatherer tests tests-extra

This adds F<xt/release/pod-coverage.t> to your distribution, which is
a standard L<Test::Pod::Coverage> test using
L<Pod::Coverage::TrustPod>.


=plugin PodSyntaxTests
core file-gatherer tests tests-extra

This adds F<xt/release/pod-syntax.t> to your distribution, which is a
standard L<Test::Pod> test.


=plugin PodVersion
core file-munger documentation version-insert

This plugin adds a C<=head1 VERSION> section to most Perl files in the
distribution, indicating the version of the dist being built.  This section is
added after C<=head1 NAME>.  If there is no such section, the version section
will not be added.

People using L<Pod::Weaver> or L<Pod::Loom> won't need this plugin.


=plugin Prereqs
core prereqs

This plugin allows you to declare your distribution's prerequisites in
your F<dist.ini>.


=plugin PruneCruft
core file-pruner

This plugin removes files commonly added by the toolchain that should
not be included in your distribution.  It I<does not> remove things
like backup files created by your text editor.


=plugin PruneFiles
core file-pruner

This plugin allows you to explicitly prune some files from your
distribution. You can either specify the exact set of files (with the
"filenames" parameter) or provide the regular expressions to
check (using "match").

This plugin is for people who like to keep the list of pruned files in
F<dist.ini>.  If you prefer to use a separate file for that, use
L<ManifestSkip|Dist::Zilla::Plugin::ManifestSkip>.


=plugin Readme
core file-gatherer documentation

This plugin adds a very simple F<README> file to the distribution,
citing the dist's name, version, abstract, and license.  It may be
more useful or informative in the future.


=plugin RemovePrereqs
core prereqs

This will remove any mention of specified modules from your
distribution's prerequisites.  This is useful for eliminating
incorrectly detected prereqs.


=plugin ShareDir
core

This plugin lets you install a directory's contents as dist-level
shared data files (to use with C<dist_file> from L<File::ShareDir>).


=plugin TemplateModule
core minting template

This is a L<ModuleMaker|Dist::Zilla::Role::ModuleMaker> used for
creating new Perl modules files when minting a new dist with
S<C<dzil new>>.


=plugin UploadToCPAN
core releaser

This plugin will upload your distribution to the CPAN.


=plugin >add
command core

Add a module to a dist


=plugin >authordeps
command core

List your distribution's author dependencies


=plugin >build
command core

This command is a very thin layer over the Dist::Zilla C<build> method,
which does all the things required to build your distribution. By default,
it will also archive your distribution and leave you with a complete,
ready-to-release distribution tarball.


=plugin >clean
command core

Clean up after build, test, or install


=plugin >install
command core

Install your dist


=plugin >listdeps
command core

This is a command plugin for L<Dist::Zilla>. It provides the C<listdeps>
command, which prints your distribution's prerequisites. You could pipe
that list to a CPAN client like L<cpan> to install all of the dependecies
in one quick go. This will include author dependencies (those listed under
C<develop_requires>) if the C<--author> flag is passed. You can also pass
the C<--missing> flag to list only dependencies which are unsatisfied.


=plugin >new
command core

Mint a new dist


=plugin >nop
command core

Initialize dzil, then exit


=plugin >release
command core

Release your dist to the CPAN


=plugin >run
command core

This command will build your dist with Dist::Zilla, then build the
distribution and then run a command in the build directory. It's something
like doing this:

  dzil build
  rsync -avp My-Project-version/ .build/
  cd .build
  perl Makefile.PL	      # or perl Build.PL
  make			      # or ./Build
  export PERL5LIB=$PWD/blib/lib:$PWD/blib/arch
  <your command as defined by rest of params>


=plugin >setup
command core

Set up a basic global config file


=plugin >smoke
command core

This command builds and tests the distribution in "smoke testing mode."
This command is a thin wrapper around the
L<test|Dist::Zilla::Dist::Builder/test> method in Dist::Zilla. It builds
your dist and runs the tests with the AUTOMATED_TESTING environment
variable turned on, so it's like doing this:


=plugin >test
command core

This command is a thin wrapper around the
L<test|Dist::Zilla::Dist::Builder/test> method in Dist::Zilla. It builds
your dist and runs the tests with the AUTHOR_TESTING environment variable
turned on, so it's like doing this:

  export AUTHOR_TESTING=1
  dzil build --no-tgz
  cd $BUILD_DIRECTORY
  perl Makefile.PL
  make
  make test


=plugin @Basic
bundle core

This plugin is meant to be a basic "first step" bundle for using
Dist::Zilla. It won't munge any of your code, but will generate a
F<Makefile.PL> and allows easy, reliable releasing of distributions.
It includes the following plugins with their default configuration:


=plugin @Classic
bundle core

This bundle is more or less the original configuration bundled with
Dist::Zilla. More than likely, you'd rather be using
L<@Basic|Dist::Zilla::PluginBundle::Basic> or a more complex bundle. This
one will muck around with your code by adding C<$VERSION> declarations and
will mess with you Pod by adding a C<=head1 VERSION> section, but it won't
get you a lot of more useful features like autoversioning, autoprereqs, or
Pod::Weaver.
It includes the following plugins with their default configuration:


=plugin @FakeClassic
bundle core

Build something more or less like a "classic" CPAN dist


=plugin @Filter
bundle core

This plugin bundle actually wraps and modifies another plugin bundle. It
includes all the configuration for the bundle named in the C<-bundle>
attribute, but removes all the entries whose package is given in the
C<-remove> attributes.
Options not prefixed with C<-> will be passed to the bundle to be filtered.


=plugin @Git
bundle git version-control

This is a plugin bundle to load all git plugins. It is equivalent to:

    [Git::Check]
    [Git::Commit]
    [Git::Tag]
    [Git::Push]

=for deprecated =plugin AutoPrereq
core


=plugin Git::Describe
file-munger git version-control

This plugin will add the long-form git commit description for the current
repo to the dist's main module as a comment. It may change, in the future,
to put things in a package variable, or to provide an option.
It inserts this in the same place that PkgVersion would insert a version.


=plugin PodPurler
documentation file-munger

PodPurler ress, which rips apart your kinda-POD and reconstructs it as
boring old real POD.


=plugin PodWeaver
documentation file-munger

[PodWeaver] is the bridge between L<Dist::Zilla> and L<Pod::Weaver>. It
rips apart your kinda-Pod and reconstructs it as boring old real Pod.

=for deprecated =plugin Prereq
core


=plugin TaskWeaver
file-gatherer prereqs

The TaskWeaver plugin acts just like the PodWeaver plugin, but gets its
claws just a bit into your Pod::Weaver configuration and then uses them to
figure out prerequisites and grouping for building a Task distribution.
The C<Task::> namespace is used for libraries that do not have any code of
their own, but are just ways of getting a lot of other libraries installed
at once. In other words, they're just prerequisites with no actual logic.
